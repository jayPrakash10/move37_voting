generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  polls        Poll[]   @relation("UserPolls")
  votes        Vote[]

  @@index([email])
  @@index([createdAt])
}

model Poll {
  id          String       @id @default(uuid())
  question    String
  isPublished Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  user        User         @relation("UserPolls", fields: [userId], references: [id], onDelete: Cascade)
  options     PollOption[]
  votes       Vote[]

  @@index([userId])
  @@index([createdAt])
  @@index([isPublished, createdAt])
}

model PollOption {
  id        String   @id @default(uuid())
  text      String
  pollId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  poll      Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes     Vote[]

  @@index([pollId])
  @@index([createdAt])
}

model Vote {
  id           String     @id @default(uuid())
  userId       String
  pollId       String
  pollOptionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  poll         Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)

  @@unique([userId, pollId], name: "user_poll_vote")
  @@index([pollId])
  @@index([pollOptionId])
  @@index([userId])
  @@index([createdAt])
}
